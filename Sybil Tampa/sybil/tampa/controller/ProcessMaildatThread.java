package sybil.tampa.controller;

/**
 * This Object processes the mail strip file containg Maildat information.
 * The information from the mail strip parameter file is used to get the names of the
 * files to zip up and send to the plant.  All of the information needed to build
 * the zip file name comes from the mail strip parameters file.  
 * 
 * NOTE: If any of the files with the configured extention is not found, 
 * 			the processing will be aborted!
 * 
 * This type was generated by a SmartGuide.
 * @author Mi Yun
 */
import java.util.zip.*;
import sybil.common.util.*;
import sybil.common.event.*;
import sybil.common.model.*;
import java.util.*;
import java.io.*;
import sybil.common.persistence.*;

public class ProcessMaildatThread extends Thread{
	private String extentions;
	private String inputDir;
	private File dirFile;
	private Vector fileFilters = new Vector();
	private String mailDatFileSetName;
	private String newDataSetName;
	private String zipFileName;

	private String dest;
	private ZipFilePersistent zfp = null;
	private String destPlant = null;

	//private String prographDir = null;  10/30/01 - Files are no longer sent to Prograph.
	private String maildatWebDir = null;
	private String MaildatProviderName = "TCS1";
	//private boolean sendToPrograph = true; 10/30/01 - Files are no longer sent to Prograph.

	
	public ProcessMaildatThread( MailStripContentParameters p, int fileNum)	{
		String prop;
		String w = null;
		String week = null;
		
		destPlant = p.getPlantRepresentedByFile(fileNum).toLowerCase();
		this.mailDatFileSetName = p.getdatasetNameOfFile(fileNum);

		String s = getMailDatType(p.getdatasetNameOfFile(fileNum));

		LogWriter.writeLog(" Maildat p.getdatasetNameOfFile() = " + p.getdatasetNameOfFile(fileNum));
		
		String str1 = p.getIssueNumber().trim();
		week = p.getWeekNumber();
		
		//10/30/01 - Files are no longer sent to Prograph.
		//if( p.getSourceProcessType(fileNum).equalsIgnoreCase("STRIP")){
			//sendToPrograph = true;
			//} else {
			//sendToPrograph = false;
			//}

		this.newDataSetName = new String(MaildatProviderName + str1.substring(str1.length() -2, str1.length()) + week.substring(1,2) + s);
			
		dest = p.getMagazineCode().toLowerCase()+".i"+
					p.getIssueNumber().toLowerCase()+"."+
					destPlant+"."+
					p.getSourceLabelType(fileNum).toLowerCase()+"."+
					p.getSourceProcessType(fileNum).toLowerCase()+"."+
					p.getSourceDataType(fileNum).toLowerCase()+"."+week+".zip";

		if( (prop = PropertyBroker.getProperty("CustomerDataFileOutputDirectory")) == null) {
			SybilWarningException e = new SybilWarningException(
					"ProcessMaildatThread(): CustomerDataFileOutputDirectory is not defined.");
			LogWriter.writeLog(e);
			return;
		}
		
		zipFileName = prop + dest;
		
		// initialize zip file persistance object
		zfp = new ZipFilePersistent(zipFileName);
		
		if( (inputDir = PropertyBroker.getProperty("CustomerDataFileInputDirectory")) == null) {
			SybilWarningException e = new SybilWarningException(
					"ProcessMaildatThread(): CustomerDataFileInputDirectory is not defined.");
			LogWriter.writeLog(e);
			return;
		}	
		
		dirFile = new File(inputDir);
		if( !dirFile.exists() || !dirFile.isDirectory()) {
			SybilWarningException e = new SybilWarningException(
				"ProcessMaildatThread(): "+inputDir+" does not exist or is not a directory.");
			LogWriter.writeLog(e);
			return;
		}	
	
		// Initialize maildat filters.
		if( (extentions = PropertyBroker.getProperty("MailDatExtentions")) == null) {
			SybilWarningException e = new SybilWarningException(
					"ProcessMaildatThread(): MailDatExtentions are not defined.");
			LogWriter.writeLog(e);
			return;
		}
		
		StringTokenizer st = new StringTokenizer( extentions, ",");
		int numEntries = st.countTokens();
		for( int i=0; i<numEntries; i++){
			fileFilters.addElement(new FileExtentionFilter(st.nextToken()));
		}	
		//10/30/01 - Files are no longer sent to Prograph.
		//if ((prographDir = PropertyBroker.getProperty("PrographDirectory")) != null) {
		//	File df = new File(prographDir);
		//	if (!df.exists() || !df.isDirectory()) {
		//		LogWriter.writeLog("PrographDirectory: <" + df.getPath() + "> is not defined properly!");
		//		prographDir = null;
		//	} 
		//}
		
		if ((maildatWebDir = PropertyBroker.getProperty("MaildatWebDirectory")) != null) {
			File df = new File(maildatWebDir);
			if (!df.exists() || !df.isDirectory()) {
				LogWriter.writeLog("MaildatWebDirectory: <" + df.getPath() + "> is not defined properly!");
				maildatWebDir = null;
			} 
		}
		
		LogWriter.writeLog("Process..Thread:"+"Processing input Maildat file set: <"+dirFile+mailDatFileSetName+".*>");			

	}		
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String getMailDatFileSetName( ) {
	return mailDatFileSetName;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.String
 * @param type java.lang.String
 */
public String getMailDatType(String fileName) {
	
//    Takes the file name inside the mailparm and tokenizes it to get the last token.  
//    Then substrings the last token to see if the first character is and "R" or "A".
//    If it is it uses the last character in that token otherwise it uses the first 
//    character in that token. Example file name in the mailparm -- 
//    MO.I060704.CLK.MAILDAT.OMS2.R1, the last token is "UO"
	
	
	String typecode = null;
	String firstChar = null;
	String secondChar = null;
	String lastToken = null;

	StringTokenizer stFile = new StringTokenizer(fileName, ".");
	while (stFile.hasMoreTokens()) {
		lastToken = stFile.nextToken().trim();
	}
	if (lastToken.length() >1) {
		firstChar = (lastToken.substring(0,1));
		secondChar = (lastToken.substring(1,2));
		if ((firstChar.equalsIgnoreCase("r"))	|| (firstChar.equalsIgnoreCase("a"))) {
			typecode = secondChar;
		}else {
			typecode = firstChar;
		}
	}else {
		firstChar = (lastToken.substring(0,1));
		typecode = firstChar;
	}
	
	return typecode.toLowerCase();
}



/**
 * This method was created by a SmartGuide.
 */
public static void main (String args[]) {
	
	MailStripContentParameters p = new MailStripContentParameters();	
	
	try {
		//PropertyBroker.load("c:\\tampaHome\\sybiltampa.ini");
		PropertyBroker.load(args[0]);
	}catch(IOException ioe) {}	

	ProcessMaildatThread md = new ProcessMaildatThread(p, 0);

	md.start();

	return;
}
	public void run(){
	
	File f = null;
	FileExtentionFilter fef;	
	String moveDir = null;
		
	for( int i=0; i<fileFilters.size(); i++){
			fef = (FileExtentionFilter)fileFilters.elementAt(i);		
			f = new File( dirFile, mailDatFileSetName+fef.getExtention());
			if( f.exists()){

				try{
					zfp.addFile(f, newDataSetName+fef.getExtention());
				} catch (SybilWarningException e) {
					LogWriter.writeLog(e);
					zfp.finish();
					return;
				}		

			} 
			//10/30/2001 - Error checking did not allow maildat files that did not contain a dataset for each mail dat extention in the ini file.
			//else {
			//	SybilWarningException e = new SybilWarningException("ProcessMaildatThread.run():<ERROR!> Maildat file "+
			//		f.getName()+" could not be found!!");
			//	LogWriter.writeLog(e);
			//	zfp.finish();
			//	continue;
			//}				
		} // for( ...

		zfp.finish();

		//10/30/01 - Files are no longer sent to Prograph.
		
		//if( (prographDir != null) && sendToPrograph) {
		//	SybilFile sf = new SybilFile (zfp.getZipFileName());

		//	if( !sf.exists()){
		//		LogWriter.writeLog( "Error! <" + sf.getPath() + 
		//			"> does not exist!  File has not been copied to <" + 
		//			prographDir +">.");
		//		return;
		//	}
				
		//	File nf = new File(prographDir, sf.getName());
			
		//	if( nf.exists()){
		//		if( !nf.delete()) {
		//			LogWriter.writeLog( "Error! Could not remove the old version " +
		//				"of the file in <" + nf.getPath() + ">. Please copy the new version" +
		//				" of the file to <" + prographDir + "> manually!");
		//			return;
		//		}
		//	}
			
		//	if(!sf.copyTo(nf)){
		//		LogWriter.writeLog("Error! <" + sf.getPath() + 
		//			"> could not be copied to <" + prographDir + ">!");
		//	}
		//}

		if( maildatWebDir != null) {
			SybilFile sf = new SybilFile (zfp.getZipFileName());

			if( !sf.exists()){
				LogWriter.writeLog( "Error! <" + sf.getPath() + 
					"> does not exist!  File has not been copied to <" + 
					maildatWebDir +">.");
				return;
			}
				
			File nf = new File(maildatWebDir, sf.getName());
			
			if( nf.exists()){
				if( !nf.delete()) {
					LogWriter.writeLog( "Error! Could not remove the old version " +
						"of the file in <" + nf.getPath() + ">. Please copy the new version" +
						" of the file to <" + maildatWebDir + "> manually!");
					return;
				}
			}
			
			if(!sf.copyTo(nf)){
				LogWriter.writeLog("Error! <" + sf.getPath() + 
					"> could not be copied to <" + maildatWebDir + ">!");
			}
		}

		return;
	}	
/**
 * This method was created by a SmartGuide.
 */
public void setMailDatFileSetName (String mailDatFileSetName) {
	this.mailDatFileSetName = mailDatFileSetName;
	return;
}
}
