package sybil.tampa.controller;

/**
 * This type was generated by a SmartGuide.
 * @author Steve Caum
 */
import java.io.*;
import java.util.*;
import sybil.common.util.*;
import sybil.common.persistence.*;
import sybil.common.event.*;

public class StartSybil {
	
	private static final String DEFAULT_PROPERTY_FILE = "sybil.ini";
	
/**
 * This method was created by a SmartGuide.
 */
private static void initializeLogFile() {
	
	String prop = null;
	boolean writeLog = false;
	long maxFileSize = 0;
	String fPath;
	String fName;
	String fullName;
	
	// Get "LogMessages" switch.  If not 'true', don't go any further.
	if ((prop = PropertyBroker.getProperty("LogMessagesToFile")) != null) {
		prop.toLowerCase();
		if (prop.equals("true")) {
			writeLog = true;
		}	
	}
	
	// Get "LogFileDirectory"
	if ((prop = PropertyBroker.getProperty("LogFileDirectory")) != null) {
		fPath = prop;
	} else {
		System.out.println("Error: Log File Path not specified.  Assuming none");
		fPath = null;
	}

	// Get "LogFilemaxSize"
	if ((prop = PropertyBroker.getProperty("LogFileMaxSize")) != null) {
		maxFileSize = Integer.parseInt(prop);
	} else {
		maxFileSize = 100000;		// Default to 100K
	}

	LogWriter.initialize (writeLog, maxFileSize, fPath);
	
	return;
}
/**
 * This method was created by a SmartGuide.
 * @param args java.lang.String[]
 */
public static void main(String args[]) {


	// Process the command-line args.
	if (processCommandLine(args)) {
		return;
	}
	
	// Initialize the Log File Writer so that logging can occur
	initializeLogFile();

	// Display start time
	LogWriter.writeLog ("+++++++++++++++++++++++++++++++++++++++");
	LogWriter.writeLog ("Sybil Tampa is initializing.");

	// Open up database connections
	try {
		DbConnectionManager.startup();
	}
	catch (Exception e) {
		// Major error--shut down sybil
		LogWriter.writeLog (e);
		System.exit(-1);
	}	

	// Initialize the Sybil Event Manager.
	SybilEventManager sem = new SybilEventManager();

	// Code to initialize thread that checks for new data files
	DataArrivedChecker dac = new DataArrivedChecker();
	ReceiveDataManager rdm = new ReceiveDataManager();
	DataArrivedAdapter daa = new DataArrivedAdapter(rdm);
	dac.addDataArrivedListener(daa);

	// Initialize thread that watches for events and posts notifications	
	//ReceiveEventManager rem = new ReceiveEventManager();
	//DataArrivedAdapter daaRem = new DataArrivedAdapter(rem);
	//dac.addDataArrivedListener(daaRem);
		
	// Code to initialize thread that watches for new output files and adds them
	// to the schedule and/or sends the files 'on their way'.
	SchedulePlantDataManager spd = new SchedulePlantDataManager();

	LogWriter.writeLog ("Sybil Tampa is running.");
	LogWriter.writeLog ("+++++++++++++++++++++++++++++++++++++++");
	LogWriter.writeLog ("");

	Thread tMainAdapter = new Thread(daa);		// Main Processing Thread
	tMainAdapter.start();

	Thread tMainChecker = new Thread(dac);		// Main File Watcher Thread
	tMainChecker.start();

	Thread tSchedMgr = new Thread(spd);			// Scheduler Thread
	tSchedMgr.start();

	//Thread tEventMgr = new Thread(daaRem);
	//tEventMgr.start();

	return;
}
	// Process the command line arguments.
	//
	private static boolean processCommandLine(String args[]) {

		if (args.length > 0) {
			if (args[0].equals("-?") || args[0].toLowerCase().equals("-help")) {
				System.out.println("usage: sybil.tampa.controller.StartSybil "
					+ " <property-file>");
				return true;
			}
			else {
				try {
					PropertyBroker.load(args[0]);
				}
				catch (IOException ex) {
					System.out.println("usage: sybil.tampa.controller.StartSybil "
						+ " <property-file>");
					System.out.println("     Property file <" + args[0] + "> not found");
					return true;
				}
			}
		}
		else {
			try {
				PropertyBroker.load(DEFAULT_PROPERTY_FILE);
			}
			catch (IOException ex) {
				System.out.println("usage: sybil.tampa.controller.StartSybil "
						+ " <property-file>");
				System.out.println("  Error loading properties file: " + ex);
				System.out.println("     Default property file <" + DEFAULT_PROPERTY_FILE + 
										"> not found");
				return true;
			}
		}

		return false;
	}
}
